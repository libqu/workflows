name: "Ebook Release"
on:
  workflow_call

# Limits permissions.
permissions:
  contents: write  # for creating a release
  actions: read    # for GitHub actions
  
jobs:
  build-release:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with: 
        fetch-depth: 0 # fetch all

    - name: Check branch name starts with 'lang/' and 'src/' changes
      run: |
        if [[ $GITHUB_REF != refs/heads/lang/* ]]; then
          echo "GITHUB_REF: $GITHUB_REF" # debug
          echo "STOP_WORKFLOW=true" >> $GITHUB_ENV
          exit 0
        fi

        echo "after checking branch name" #debug

        if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
          CHANGED_FILES=$(git ls-files) # when new branch been created
        else
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
        fi

        if ! echo "$CHANGED_FILES" | grep -qE '^src/'; then
          echo "CHANGED_FILES: $CHANGED_FILES" # debug
          echo "STOP_WORKFLOW=true" >> $GITHUB_ENV
          exit 0
        fi

        echo "after checking changed files" #debug

    - name: Build inside Docker
      if: env.STOP_WORKFLOW != 'true'
      run: |
        docker run --rm -v $PWD:/repo -w /repo python:latest /bin/bash -c "
        apt update && apt install --no-install-recommends calibre default-jre git -y
        pip install -U pip
        git clone https://github.com/libqu/se-tools.git /tools
        pip install /tools
        se build --output-dir=.build --kindle --kobo .
        "

    - name: Rename builds
      if: env.STOP_WORKFLOW != 'true'
      run: |
        echo "LANGUAGE=${GITHUB_REF#refs/heads/lang/}" >> $GITHUB_ENV
        REPO_NAME=${GITHUB_REPOSITORY##*/}
        sudo chown -R $USER: .build
        cd .build
        for f in *.*; do 
            case "$f" in
                *_advanced.epub)
                    mv "$f" "${REPO_NAME}.${env.LANGUAGE}.advanced.epub"
                    ;;
                *.kepub.epub)
                    mv "$f" "${REPO_NAME}.${env.LANGUAGE}.kobo.kepub.epub"
                    ;;
                *.epub)
                    mv "$f" "${REPO_NAME}.${env.LANGUAGE}.compatible.epub"
                    ;;
                *.azw3)
                    mv "$f" "${REPO_NAME}.${env.LANGUAGE}.kindle.azw3"
                    ;;
            esac
        done

    - name: Create release
      if: env.STOP_WORKFLOW != 'true'
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Define language descriptions
          const languageDescriptions = {
            "zh-Hant": "繁體中文",
            "zh-Hans": "简体中文",
          };

          // Fetch releases to find if one already exists
          const releases = await github.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const existingRelease = releases.data.find(release => release.tag_name === process.env.LANGUAGE);
          
          // Delete existing release if it exists
          if (existingRelease) {
            await github.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: existingRelease.id,
            });
          }

          // Create release
          const release = await github.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: process.env.LANGUAGE,
            name: languageDescriptions[process.env.LANGUAGE],
            body: `${process.env.LANGUAGE}\n${languageDescriptions[process.env.LANGUAGE]}`
          });

          // Upload assets
          const assetsDir = path.join(process.env.GITHUB_WORKSPACE, '.build');
          const allowedExtensions = ['.azw3', '.epub'];

          for (const asset of fs.readdirSync(assetsDir)) {
              const extname = path.extname(asset);
              if (allowedExtensions.includes(extname)) {
                  await github.repos.uploadReleaseAsset({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      release_id: release.data.id,
                      name: path.basename(asset),
                      data: fs.readFileSync(path.join(assetsDir, asset)),
                  });
              }
          }



